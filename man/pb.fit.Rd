% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pbanalysis.r
\name{pb.fit}
\alias{pb.fit}
\title{Peters-Belson model fit}
\usage{
pb.fit(
  formula,
  data,
  weights = NULL,
  strata = NULL,
  psu = NULL,
  survey.design = NULL,
  family = "gaussian",
  disparity.group = "race",
  majority.group = "white",
  minority.group = NULL,
  prop.odds.fail = NULL,
  base.level = NULL
)
}
\arguments{
\item{formula}{A description of the advantaged group (AG) model, e.g. y ~ x}

\item{data}{The dataset to be used for analysis. Must include response, covariates and a group membership variable (see examples)}

\item{weights}{Optional sample weight vector for survey data. If survey parameters are not specified, a simple random sample will be assumed.}

\item{strata}{Vector of strata labels for survey data. If not specified, we assume a non-stratified design (i.e. a single stratum)}

\item{psu}{Vector of primary sampling unit (PSU) labels for multistage survey designs. If the same PSU label is used in two different strata, the PSU's will
be assumed distinct.}

\item{survey.design}{A svydesign object (see survey package) can be optionally provided here. If provided, it will take the place of the data, weights, strata
and psu arguments. Hence, users familiar with the survey package may choose to provide a svydesign object instead of manually specifying the four preceding arguments.}

\item{family}{A string representing a model family supported by this package. Options include "gaussian", "ordinal" and "multinomial". Note that
gaussian models are appropriate for a continuous response. For a multinomial model, any response level names are allowed. For ordinal models, please use positive integers
1,2,3 etc. to indicate ordering of response levels.}

\item{disparity.group}{The column name of the group membership (e.g. race) variable.}

\item{majority.group}{The level name for the advantaged group (AG) or reference group.}

\item{minority.group}{The level name (or vector of level names) of the minority/disadvantaged groups to be considered in the analysis. If not specified,
it is assumed that all non-AG levels will be considered.}

\item{prop.odds.fail}{Specify this only for ordinal family. For ordinal family, if not provided, it is assumed that the proportional odds assumption holds for
all covariates in the model. Otherwise, prop.odds.fail should contain a vector of all names of variables for which the proportional odds assumption does not hold.
The user is encouraged to first perform a statistical test to determine which variables fail to satisfy the proportional odds assumption.
If prop.odds.fail is specified and has length>0, an unconstrained partial proportional odds model will be used.}

\item{base.level}{This is an optional argument that can only be used with multinomial family. For a T-level multinomial model, base.level will be assumed
to be the reference level and will always be included in the model output. By default, only levels 1,2,3,...,T-1, in alphabetical ordering will be shown in the
model output. However, if specified, base.level will be considered as level 1, and hence forced to be included in the model output.}
}
\description{
Peters-Belson model fit
}
\examples{
#test code for ordinal


data = data.frame(bmi_cat = NHANES::NHANES$BMI_WHO,
             race = NHANES::NHANES$Race1,
             age = NHANES::NHANES$Age,
             poverty = NHANES::NHANES$Poverty
             )
data = na.omit(data)

out = pb.fit(bmi_cat ~ age + poverty,
             data = data,
             disparity.group = "race",
             majority.group = "White",
             minority.group = c("Black"),
             prop.odds.fail = c("age"),
             family = "ordinal")

print(out)


#test code for binary outcome


data = data.frame(bmi_bin = as.integer(NHANES::NHANES$BMI > 20) ,
                  race = NHANES::NHANES$Race1,
                  age = NHANES::NHANES$Age,
                  poverty = NHANES::NHANES$Poverty
)
data = na.omit(data)

out = pb.fit(bmi_bin ~ age + poverty,
             data = data,
             disparity.group = "race",
             majority.group = "White",
             minority.group = c("Black"),
             family = "multinomial")

print(out)

#test code for continuous outcome


data = data.frame(bmi_con = NHANES::NHANES$BMI ,
                  race = NHANES::NHANES$Race1,
                  age = NHANES::NHANES$Age,
                  poverty = NHANES::NHANES$Poverty
)
data = na.omit(data)

out = pb.fit(bmi_con ~ age + poverty,
             data = data,
             disparity.group = "race",
             majority.group = "White",
             minority.group = c("Black"),
             family = "gaussian")

print(out)

}
